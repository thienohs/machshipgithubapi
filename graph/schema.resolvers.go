package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"machshipgithubapi/graph/model"
	"net/http"
	"net/http/httptest"
	"strings"
)

// AvgFollowersPerPublicRepo is the resolver for the avg_followers_per_public_repo field.
func (r *githubUserInfoResolver) AvgFollowersPerPublicRepo(ctx context.Context, obj *model.GithubUserInfo) (*float64, error) {
	result := float64(obj.AvgFollowersPerPublicRepo)
	return &result, nil
}

// RetrieveUsers is the resolver for the retrieveUsers field.
func (r *queryResolver) RetrieveUsers(ctx context.Context, usernames []*string) (*model.ResultRetrieveUsers, error) {
	responseRecorder := httptest.NewRecorder()

	// Create compatible []string from usernames []*string
	usernamesStr := make([]string, len(usernames))
	for i, eachUsernamePointer := range usernames {
		usernamesStr[i] = *eachUsernamePointer
	}
	target := fmt.Sprintf("/retrieveUsers?usernames=%v", strings.Join(usernamesStr, ","))
	request := httptest.NewRequest(http.MethodGet, target, nil)
	r.RetrieveUsersHandler(responseRecorder, request)

	// Process response
	response := responseRecorder.Result()
	defer response.Body.Close()
	responseData, err := io.ReadAll(response.Body)

	if err != nil {
		return nil, err
	}

	// Parse json response (string) to ResultRetrieveUsers
	jsonResponseData := &model.ResultRetrieveUsers{}
	err = json.Unmarshal([]byte(responseData), &jsonResponseData)
	return jsonResponseData, err
}

// GithubUserInfo returns GithubUserInfoResolver implementation.
func (r *Resolver) GithubUserInfo() GithubUserInfoResolver { return &githubUserInfoResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type githubUserInfoResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
